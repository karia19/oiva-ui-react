{"version":3,"file":"index.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/components/Button/Button.tsx","../src/components/ImageGrid/ImageGrid.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React from \"react\";\nimport \"./Button.css\";\n\n\nexport type ButtonProps = {\n  label: string;\n}\n\nconst Button = (props: ButtonProps) => {\n  return <button className=\"styled-button\">{props.label}</button>;\n};\n\nexport default Button;","import React, { useState, useEffect } from \"react\";\nimport './ImageGrid.css';\n\nexport type columnSize = number | 3;\nexport type imageProps = {\n    id: number;\n    url: string;\n    alt: string;\n    name: string;\n};\nconst TwoColumnImageGrid: React.FC<{ firstRow: imageProps[]; secondRow: imageProps[]; }> = ({firstRow, secondRow}) => (\n    <div className=\"image-component\">\n        <div className=\"w3-row\" id=\"myGrid\"></div>\n        <div className=\"row1\">\n        <div className=\"column\" style={{ cursor: \"pointer\" }}>\n            {firstRow.map((x:any) => (\n            <img key={x.id} src={x.url} alt={x.name} />\n            ))}\n        </div>\n        <div className=\"column\" style={{ cursor: \"pointer\" }}>\n            {secondRow.map((x:any) => (\n            <img key={x.id} src={x.url} alt={x.name} />\n            ))}\n        </div>\n        </div>\n    </div>    \n);\nconst TreeColumnImageGrid:React.FC<{ firstRow: imageProps[]; secondRow: imageProps[]; thirdRow: imageProps[]; }> = ({firstRow, secondRow, thirdRow}) => (\n    <div className=\"image-component\">\n        <div className=\"row1\">\n            <div className=\"column\" style={{ cursor: \"pointer\" }} >\n                {firstRow.map(x => \n                    <img key={x.id} src={x.url}  alt={x.alt}  />\n                )}\n            </div>\n\n            <div className=\"column\" style={{ cursor: \"pointer\" }} >\n                {secondRow.map(x => \n                    <img key={x.id} src={x.url}  alt={x.alt} />\n                )}\n            </div>\n\n            <div className=\"column\" style={{ cursor: \"pointer\" }} >\n                {thirdRow.map(x => \n                    <img key={x.id} src={x.url} alt={x.alt}  />\n                )}\n            </div>\n        </div> \n    </div>\n\n)\n\n\nconst ImageGrid:React.FC<{ mainSrc: imageProps[]; colSize: columnSize}>  = ( {mainSrc, colSize }) => {\n    if (!mainSrc || mainSrc.length === 0) {\n        return <div>No images to display</div>; // Example handling\n    }\n    console.log(mainSrc)\n    const [underFive, setUnderFive] = useState<imageProps[]>([]);\n    const [overFive, setOverFive] = useState<imageProps[]>([]);\n    const [rest, setRest] = useState<imageProps[]>([]);\n\n    useEffect(() => {\n        const imageSize:number = Math.floor(mainSrc.length / colSize);\n        setUnderFive(mainSrc.filter((x:any) => x.id <= imageSize));\n        setOverFive(mainSrc.filter((x:any) => x.id > imageSize && x.id <= imageSize * 2));\n        setRest(mainSrc.filter((x:any) => x.id > imageSize * 2));\n        console.log(\"this is from usestate\", mainSrc, colSize)\n    }, [mainSrc, colSize]);\n\n    return(\n        <div>\n            <p>This is image grid</p>\n            <TreeColumnImageGrid \n                firstRow={underFive}\n                secondRow={overFive}\n                thirdRow={rest}\n            />\n        </div>\n    )\n}\n\nexport default ImageGrid;"],"names":[],"mappings":"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","x_google_ignoreList":[0]}