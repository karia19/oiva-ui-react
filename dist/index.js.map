{"version":3,"file":"index.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/components/Button/Button.tsx","../src/components/ImageGrid/ImageGrid.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React from \"react\";\nimport \"./Button.css\";\n\n\nexport type ButtonProps = {\n  label: string;\n}\n\nconst Button = (props: ButtonProps) => {\n  return <button className=\"styled-button\">{props.label}</button>;\n};\n\nexport default Button;","import React, { useState, useEffect } from \"react\";\nimport './ImageGrid.css';\n\nexport type columnSize = number | 3;\nexport type imageProps = {\n    id: number;\n    url: string;\n    alt: string;\n    name: string;\n};\n\nconst ImageGrid:React.FC<{ mainSrc: imageProps[]; colSize: columnSize}>  = ( {mainSrc, colSize }) => {\n    const [columnCss, setColumnCss] = useState('column')\n\n    if (!mainSrc || mainSrc.length === 0) {\n        return <div>No images to display</div>; // Example handling\n    }\n    const imageRows = React.useMemo(() => {\n        if (colSize >= 4){\n            setColumnCss(\"column-4\")\n        }\n        const rows: imageProps[][] = [];\n        const rowSize = Math.round(mainSrc.length / colSize)\n        console.log(rowSize)\n\n        let startIndex = 0\n        let endIndex = rowSize\n\n        for (let i = 0; i <= colSize -1; i++) {\n            console.log(startIndex, endIndex)\n            //const endIndex = Math.min(i + colSize, mainSrc.length);\n            rows.push(mainSrc.slice(startIndex, endIndex));\n            startIndex = endIndex\n            endIndex += rowSize\n\n        }\n        \n        console.log(rows)\n        return rows;\n        }, [mainSrc, colSize]);\n        \n\n\n    const ImageItems: React.FC<{ images: imageProps[] }> = ({ images }) => {\n        return (\n          <div key={images.length} className={columnCss} > \n            {images.map((image) => (\n              <img key={image.id} src={image.url} alt={image.name} />\n            ))}\n          </div>\n        );\n      };\n        \n    return (  \n        <div className=\"image-component\">\n            <div className=\"row1\">\n                {imageRows.map((row, rowIndex) => (\n                    <ImageItems key={rowIndex} images={row} />\n                ))}            \n            </div>\n        </div>\n    )\n}\n\nexport default ImageGrid;"],"names":[],"mappings":"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","x_google_ignoreList":[0]}